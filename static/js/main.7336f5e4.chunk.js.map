{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","parseInt","localStorage","getItem","spoolSize","setSpoolSize","remainder","setRemainder","sp","JSON","parse","prints","setPrints","className","type","onChange","e","target","valueAsNumber","value","onClick","window","confirm","setItem","removeItem","location","reload","title","maxValue","needleColor","startColor","segments","endColor","height","map","p","name","usage","time","start","onSubmit","preventDefault","np","Date","toString","stringify","r","placeholder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPA6GeA,MAxGf,WAAgB,IAAD,MAEqBC,mBAASC,SAAQ,UAACC,aAAaC,QAAQ,oBAAtB,QAAsC,MAF5E,mBAENC,EAFM,KAEKC,EAFL,OAGqBL,mBAASC,SAAQ,UAACC,aAAaC,QAAQ,oBAAtB,QAAsC,MAH5E,mBAGNG,EAHM,KAGKC,EAHL,OAKeP,oBAAS,WACnC,IAAMQ,EAAKN,aAAaC,QAAQ,UAChC,OAAKK,GAAa,KAAPA,EAIJC,KAAKC,MAAMF,GAHT,MARE,mBAKNG,EALM,KAKEC,EALF,KAmDb,OACE,sBAAKC,UAAU,MAAf,UACE,+CACA,sBAAKA,UAAU,YAAf,UACE,+CACA,uBAAOC,KAAK,SAASC,SAAU,SAAAC,GAAC,OAAIX,EAAaW,EAAEC,OAAOC,gBAAgBC,MAAOf,IACjF,wBAAQgB,QArBK,SAACJ,GACbK,OAAOC,QAAQ,0CAIpBf,EAAaH,GACbQ,EAAU,IAEVV,aAAaqB,QAAQ,YAAanB,GAClCF,aAAaqB,QAAQ,YAAanB,GAClCF,aAAasB,WAAW,UAExBH,OAAOI,SAASC,WASiBC,MAAM,sDAAnC,sBAGF,cAAC,IAAD,CACGC,SAAUxB,EACVe,MAAOb,EACPuB,YAAY,QACZC,WAAW,MACXC,SAAU,GACVC,SAAS,QACTC,OAAQ,MAGX,0BAASpB,UAAU,SAAnB,UACE,wCACA,6BACGF,EAAOuB,KAAI,SAAAC,GACV,OACE,+BAAmBA,EAAEC,KAArB,KAA6BD,EAAEE,MAA/B,KAAwCF,EAAEG,KAA1C,oBAAiEH,EAAEI,MAAnE,MAASJ,EAAEI,eAMnB,0BAAS1B,UAAU,WAAnB,UACE,+CACA,uBAAM2B,SArES,SAACxB,GACpBA,EAAEyB,iBAEF7B,GAAU,SAAAuB,GACR,IAAMO,EAAE,sBACH/B,GADG,CAEN,CACEyB,KAAMpB,EAAEC,OAAOmB,KAAKjB,MACpBkB,MAAOrB,EAAEC,OAAOoB,MAAMnB,cACtBoB,KAAMtB,EAAEC,OAAOqB,KAAKpB,cACpBqB,OAAO,IAAII,MAAOC,cAKtB,OAFA1C,aAAaqB,QAAQ,SAAUd,KAAKoC,UAAUH,IAEvCA,KAITnC,GAAa,SAAAuC,GAAC,OAAIA,EAAI9B,EAAEC,OAAOoB,MAAMnB,kBAkDjC,UACE,gCACE,yCACA,uBAAOkB,KAAK,YAEd,gCACE,oDACA,uBAAOtB,KAAK,SAASiC,YAAY,IAAIX,KAAK,aAE5C,gCACE,iEACA,uBAAOtB,KAAK,SAASiC,YAAY,IAAIX,KAAK,YAE5C,6DCzFKY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7336f5e4.chunk.js","sourcesContent":["import './App.scss';\n\nimport { useState } from 'react';\nimport ReactSpeedometer from 'react-d3-speedometer';\n\nfunction App() {\n\n  const [spoolSize, setSpoolSize] = useState(parseInt(localStorage.getItem('spoolSize') ?? 1000));\n  const [remainder, setRemainder] = useState(parseInt(localStorage.getItem('remainder') ?? 1000));\n\n  const [prints, setPrints] = useState(() => {\n    const sp = localStorage.getItem('prints');\n    if (!sp || sp === '') {\n      return [];\n    }\n\n    return JSON.parse(sp);\n  });\n\n  const handleSubmid = (e) => {\n    e.preventDefault();\n\n    setPrints(p => {\n      const np = [\n        ...prints, \n        {\n          name: e.target.name.value, \n          usage: e.target.usage.valueAsNumber, \n          time: e.target.time.valueAsNumber, \n          start: new Date().toString()\n        }\n      ];\n      localStorage.setItem('prints', JSON.stringify(np));\n\n      return np;\n    });\n\n\n    setRemainder(r => r - e.target.usage.valueAsNumber);\n  };\n\n  const resetSpool = (e) => {\n    if (!window.confirm(\"Are you sure you want to reset this?\")) {\n      return;\n    }\n\n    setRemainder(spoolSize);\n    setPrints([]);\n\n    localStorage.setItem('remainder', spoolSize);\n    localStorage.setItem('spoolSize', spoolSize);\n    localStorage.removeItem('prints');\n\n    window.location.reload();\n  };\n\n  return (\n    <div className=\"app\">\n      <h1>Spool-o-meter</h1>\n      <div className=\"spoolSize\">\n        <label>Spool Size</label>\n        <input type=\"number\" onChange={e => setSpoolSize(e.target.valueAsNumber)} value={spoolSize} />\n        <button onClick={resetSpool} title=\"Clears usage and sets max spool to spool size value\">Reset</button>\n      </div>\n\n      <ReactSpeedometer\n         maxValue={spoolSize}\n         value={remainder}\n         needleColor=\"black\"\n         startColor=\"red\"\n         segments={10}\n         endColor=\"green\"\n         height={200}\n      />\n\n      <section className=\"prints\">\n        <h2>Prints</h2>\n        <ul>\n          {prints.map(p => { \n            return (\n              <li key={p.start}>{p.name}: {p.usage} ({p.time} hours - started {p.start})</li>\n            );\n          })}\n        </ul>\n      </section>\n\n      <section className=\"addPrint\">\n        <h4>Add New Print</h4>\n        <form onSubmit={handleSubmid}>\n          <div>\n            <label>Name</label>\n            <input name=\"name\" />\n          </div>\n          <div>\n            <label>Estimated Usage</label>\n            <input type=\"number\" placeholder=\"0\" name=\"usage\" />\n          </div>\n          <div>\n            <label>Estimated Print Time (hours)</label>\n            <input type=\"number\" placeholder=\"0\" name=\"time\" />\n          </div>\n          <button>Add New Print</button>\n        </form>\n      </section>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}